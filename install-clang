#! /usr/bin/env bash
#

# Copy all output to log file.
log=`basename $0`.$$.log

echo "Recording log in $log ..."

exec > >(tee $log)
exec 2>&1

# git version to checkout.
version_llvm=release_33
version_clang=release_33
version_libcxx=release_33
version_compilerrt=release_33
version_libcxxabi=release_33
# version_liblldb=release_33         # Compiling lldb doesn't work yet.
version_libcxxrt=c61efa043           # Latest commit at time of writing.

do_clone=1                 # If 0, skip the cloning (for testing only).
do_bootstrap=1             # If 0, skip the 1st stage (for testing only).
do_llvm_with_assertions=1  # If 1, build a 3rd stage LLVM with assertions enabled.

OS=`uname`
if [ "$OS" == "Linux" ]; then
    use_libcxxabi=0
    use_libcxxrt=1
    triple=""
    soext="so"
    somask="so.%s"
    addl_ldflags="-ldl"

elif [ "$OS" == "Darwin" ]; then
    use_libcxxabi=1
    use_libcxxrt=0
    triple="-apple-"
    soext="dylib"
    somask="%d.dylib"
    addl_ldflags=""

else
    echo "OS $OS not supported by this script."
    exit 1
fi

if [ "$1" = "--install" ]; then
    mode=install
fi

if [ "$1" = "--update" ]; then
    mode=update
fi

if [ $# != 2 -o "$mode" = "" ]; then
    echo "usage: `basename $0` [--install|--update] <prefix>"
    exit 1
fi

if [ ! -d $2 ]; then
    echo "$2 does not exist."
    exit 1
fi

unset CFLAGS
unset CXXFLAGS
unset CPPFLAGS
unset LDFLAGS
unset LD_LIBRARY_PATH
unset DYLD_LIBRARY_PATH

prefix="$2"
libcxx_include=$prefix/include/c++/v1
libcxx_lib=$prefix/lib

src="$2/src/llvm"
src_libcxxabi=${src}/projects/libcxxabi
src_libcxxrt=${src}/projects/libcxxrt
src_libcxx=${src}/projects/libcxx
src_compilerrt=${src}/projects/compiler-rt

default_includes=${libcxx_include}:/usr/include

function install_shared_lib
{
    src=$1
    base=`basename $src`
    lib=`ls $src.*$soext*`
    major=`echo $lib | sed 's#.*\.\([0-9]\)\..*#\\1#g'`

    if [ "$major" == "$lib" ]; then
        major=1
    fi

    dest=$libcxx_lib/$base.`printf $somask $major`
    link=$libcxx_lib/$base.$soext

    # echo "src   : $src"
    # echo "base  : $base"
    # echo "lib   : $lib"
    # echo "major : $major"
    # echo "dest  : $dest"
    # echo "link  : $link"

    rm -f $dest $link
    cp $lib $dest
    ln -s $dest $link
}

# Built libraries with RTTI.
export REQUIRES_RTTI=1

export PATH=$prefix/bin:$PATH

if [ "$mode" == "update" ]; then
    for d in $prefix $prefix/bin $src; do
        if [ ! -d $d ]; then
            echo "$d does not exist."
            exit 1
        fi
    done
fi

d=`dirname $0`
patches=`cd $d; pwd`/patches

if [ "${do_clone}" == "1" ]; then

    # Get/update the repositories.
    if [ "$mode" == "install" ]; then

        test -d $src && echo "$src already exists, aborting" && exit 1
        mkdir -p $src

        echo Changing directory to `dirname $src` ...
        cd `dirname $src`

        git clone http://llvm.org/git/llvm.git `basename $src`

        ( cd $src/tools && git clone http://llvm.org/git/clang.git )
        # ( cd $src/tools && git clone http://llvm.org/git/lldb.git )
        ( cd $src/projects && git clone http://llvm.org/git/libcxx )
        ( cd $src/projects && git clone http://llvm.org/git/compiler-rt )

        ( cd $src && git checkout ${version_llvm} )
        ( cd $src/tools/clang && git checkout ${version_clang}  )
        # ( cd $src/tools/lldb && git checkout ${version_lldb}  )
        ( cd ${src_libcxx} && git checkout ${version_libcxx} )
        ( cd ${src_compilerrt} && git checkout ${version_compilerrt} )

        if [ "${use_libcxxabi}" == "1" ]; then
            ( cd $src/projects && git clone http://llvm.org/git/libcxxabi )
            ( cd ${src_libcxxabi} && git checkout ${version_libcxxabi} )
        fi

        if [ "${use_libcxxrt}" == "1" ]; then
            ( cd $src/projects && git clone https://github.com/pathscale/libcxxrt )
            ( cd ${src_libcxxrt} && git checkout ${version_libcxxrt} )
        fi

    else
        echo Changing directory to `dirname $src` ...
        cd `dirname $src`

        ( cd ${src} && git pull --rebase )
        ( cd ${src}/tools/clang && git pull --rebase )
        # ( cd ${src}/tools/lldb && git pull --rebase )
        ( cd ${src_libcxx} && git pull --rebase )
        ( cd ${src_compilerrt} && git pull --rebase )

        ( cd $src && git checkout ${version_llvm} )
        ( cd $src/tools/clang && git checkout ${version_clang}  )
        # ( cd $src/tools/lldb && git checkout ${version_lldb}  )
        ( cd ${src_libcxx} && git checkout ${version_libcxx} )
        ( cd ${src_compilerrt} && git checkout ${version_compilerrt} )

        if [ "${use_libcxxabi}" == "1" ]; then
            ( cd ${src_libcxxabi} && git pull --rebase )
            ( cd ${src_libcxxabi} && git checkout ${version_libcxxabi} )
        fi

        if [ "${use_libcxxrt}" == "1" ]; then
            ( cd ${src_libcxxrt} && git pull --rebase )
            ( cd ${src_libcxxrt} && git checkout ${version_libcxxrt} )
        fi
    fi

    # # Apply any patches we might need.
    for i in $patches/*; do
        echo Applying $i ...
        b=`basename $i`
        ( cd `echo $b | awk -v src=$src -F - '{printf("%s/%s/%s", src, $1, $2);}'` && pwd && cat $i | git am -3 )
    done
fi

echo Changing directory to $src ...
cd $src

if [ "${do_bootstrap}" == "1" ]; then
    # To bootstrap, compile and install LLVM and clang once.

    if [ "$mode" == "install" ]; then
          echo ===
          echo === Building LLVM/clang, stage 1 ...
          echo ===

          ( mkdir -p build-stage1 && \
            cd build-stage1 && \
            cmake -DCMAKE_BUILD_TYPE=Release \
                  -DLLVM_ENABLE_ASSERTIONS=off \
                  -DLLVM_REQUIRES_RTTI=1 \
                  -DCMAKE_INSTALL_PREFIX=${prefix} \
                  -DC_INCLUDE_DIRS=${default_includes} \
                .. && \
            make -j 16 && \
            make install \
          )
    fi
fi

clang_version=`$prefix/bin/clang++ --version 2>&1 | grep ^clang | awk '{print $3}'`
mkdir -p $libcxx_include

if [ "${use_libcxxabi}" == "1" ]; then
    ### Build libc++abi with the new clang and install.
    ### Note that even though it's in the llvm/projects directory, it's not automatically included in the built
    ### as it doesn't provide a CMakeLists.txt yet.

    echo ===
    echo === Building libcxxabi ...
    echo ===

    ( cd ${src_libcxxabi}/lib && CXX=$prefix/bin/clang++ PREFIX=$prefix TRIPLE=$triple ./buildit )
    # cp -R ${src_libcxxabi}/include/* $libcxx_include
    install_shared_lib ${src_libcxxabi}/lib/libc++abi

    libcxx_cxx="$prefix/bin/clang++"
    libcxx_cc="$prefix/bin/clang"
    libcxx_cmake="-DLIBCXX_CXX_ABI=libcxxabi -DLIBCXX_LIBCXXABI_INCLUDE_PATHS=${src_libcxxrt}/include"
fi

if [ "${use_libcxxrt}" == "1" ]; then
    echo ===
    echo === Building libcxxrt ...
    echo ===

    ( cd ${src_libcxxrt} && rm -rf build && mkdir build && cd build && CFLAGS="-fPIC" CXXFLAGS="-fPIC" cmake .. && make )

    # Remove shared library so that libcxx will link against the static version.
    rm -f ${src_libcxxrt}/build/lib/*.${soext}

    libcxx_cxx="$prefix/bin/clang++"
    libcxx_cc="$prefix/bin/clang"
    libcxx_ldflags="-L${src_libcxxrt}/build/lib"
    libcxx_cmake="-DLIBCXX_CXX_ABI=libcxxrt -DLIBCXX_LIBCXXRT_INCLUDE_PATHS=${src_libcxxrt}/src"
fi

### Build libc++ with new clang and libcxx, and then install.
### Note that even though it's in the llvm/projects directory, it's not automatically included in the built.
### (In fact, libcxx is explicitly *excluded* llvm/projects/CMakeIndex.txt).

echo ===
echo === Building libc++ ...
echo ===

( cd ${src_libcxx} && rm -rf build && mkdir build && cd build &&
  CC="${libcxx_cc}" CXX="${libcxx_cxx}" LDFLAGS="${libcxx_ldflags}" cmake ${libcxx_cmake} -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$prefix .. &&
  make && make install
)

# Now compile clang with the new libaries.

echo ===
echo === Building LLVM/clang, stage 2 ...
echo ===

if [ "$mode" == "install" ]; then
    ( mkdir -p build-stage2 && \
      cd build-stage2 && \
      CC=$prefix/bin/clang     \
      CXX=$prefix/bin/clang++  \
      CXXFLAGS="-stdlib=libc++" \
      LDFLAGS="-L $libcxx_lib -Wl,-rpath,$libcxx_lib ${addl_ldflags}" \
      cmake -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_ASSERTIONS=off \
            -DLLVM_REQUIRES_RTTI=1 \
            -DCMAKE_INSTALL_PREFIX=${prefix} \
            -DC_INCLUDE_DIRS=${default_includes} \
            ..
    )
fi

( cd build-stage2 && make -j 16 && make install )

if [ "${do_llvm_with_assertions}" == "1" ]; then

    echo ===
    echo === Building LLVM with assertions, stage 3 ...
    echo ===

    ( mkdir -p build-stage3 && \
      cd build-stage3 && \
      CC=$prefix/bin/clang     \
      CXX=$prefix/bin/clang++  \
      CXXFLAGS="-stdlib=libc++" \
      LDFLAGS="-L $libcxx_lib -Wl,-rpath,$libcxx_lib ${addl_ldflags}" \
      cmake -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_ASSERTIONS=on \
            -DLLVM_REQUIRES_RTTI=1 \
            -DCMAKE_INSTALL_PREFIX=${prefix} \
            -DC_INCLUDE_DIRS=${default_includes} \
            -DLLVM_EXTERNAL_CLANG_BUILD=off \
            -DLLVM_EXTERNAL_COMPILER_RT_BUILD=off \
            ..
    )
fi

( cd build-stage3 && make -j 16 && make install )

echo "===="
echo "==== Complete log in $log"
echo "===="
