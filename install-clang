#! /usr/bin/env bash
#

use_master=1

if [ "${use_master}" != "1" ]; then
    # git version to checkout.
    version_llvm=release_33
    version_clang=release_33
    version_libcxx=release_33
    version_compilerrt=release_33
    version_libcxxabi=41458a0681f        # Latest commit at time of writing. No release_33 tag.
    # version_liblldb=release_33         # Compiling lldb doesn't work yet.
    version_libcxxrt=c61efa043           # Latest commit at time of writing.
else
    # git version to checkout.
    version_llvm=master
    version_clang=master
    version_libcxx=master
    version_compilerrt=master
    version_libcxxabi=master
    # version_liblldb=master
    version_libcxxrt=master
fi

do_clone=0                 # If 0, skip the cloning (for testing only).
do_abi=0                   # If 0, skip libc++abi/libcxxrt  (for testing only).

perform_stage1=1
perform_stage2=0
perform_stage3=0

do_llvm_with_assertions=1  # If 1, build a 3rd stage LLVM with assertions enabled.
do_llvm_with_debug=0       # If 1, build a 3rd stage LLVM in debug mode.

OS=`uname`
if [ "$OS" == "Linux" ]; then
    use_libcxxabi=0
    use_libcxxrt=1
    triple=""
    soext="so"
    somask="so.%s"
    addl_ldflags="-ldl"

elif [ "$OS" == "Darwin" ]; then
    use_libcxxabi=1
    use_libcxxrt=0
    triple="-apple-"
    soext="dylib"
    somask="%d.dylib"
    addl_ldflags=""

else
    echo "OS $OS not supported by this script."
    exit 1
fi

if [ "$1" = "--install" ]; then
    mode=install
fi

if [ "$1" = "--update" ]; then
    mode=update
fi

if [ $# != 2 -o "$mode" = "" ]; then
    echo "usage: `basename $0` [--install|--update] <prefix>"
    exit 1
fi

if [ ! -d $2 ]; then
    echo "$2 does not exist."
    exit 1
fi

# Copy all output to log file.
log=`basename $0`.$$.log
echo "Recording log in $log ..."
exec > >(tee $log)
exec 2>&1

unset CFLAGS
unset CXXFLAGS
unset CPPFLAGS
unset LDFLAGS
unset LD_LIBRARY_PATH
unset DYLD_LIBRARY_PATH

prefix=`echo $2 | sed 's#/$##g'`
libcxx_include=$prefix/include/c++/v1
libcxx_lib=$prefix/lib

mkdir -p $libcxx_include

src="$2/src/llvm"
src_libcxxabi=${src}/projects/libcxxabi
src_libcxxrt=${src}/projects/libcxxrt
src_libcxx=${src}/projects/libcxx
src_compilerrt=${src}/projects/compiler-rt

default_includes=${libcxx_include}:/usr/include

function install_shared_lib
{
    src=$1
    base=`basename $src`
    lib=`ls $src.*$soext*`
    major=`echo $lib | sed 's#.*\.\([0-9]\)\..*#\\1#g'`

    if [ "$major" == "$lib" ]; then
        major=1
    fi

    dest=$libcxx_lib/$base.`printf $somask $major`
    link=$libcxx_lib/$base.$soext

    # echo "src   : $src"
    # echo "base  : $base"
    # echo "lib   : $lib"
    # echo "major : $major"
    # echo "dest  : $dest"
    # echo "link  : $link"

    rm -f $dest $link
    cp $lib $dest
    ln -s $dest $link

    echo $dest
}

# Built libraries with RTTI.
export REQUIRES_RTTI=1

export PATH=$prefix/bin:$PATH

if [ "$mode" == "update" ]; then
    for d in $prefix $prefix/bin $src; do
        if [ ! -d $d ]; then
            echo "$d does not exist."
            exit 1
        fi
    done
fi

d=`dirname $0`
patches=`cd $d; pwd`/patches

if [ "${do_clone}" == "1" ]; then

    # Get/update the repositories.
    if [ "$mode" == "install" ]; then

        test -d $src && echo "$src already exists, aborting" && exit 1
        mkdir -p $src

        echo Changing directory to `dirname $src` ...
        cd `dirname $src`

        git clone http://llvm.org/git/llvm.git `basename $src`

        ( cd $src/tools && git clone http://llvm.org/git/clang.git )
        # ( cd $src/tools && git clone http://llvm.org/git/lldb.git )
        ( cd $src/projects && git clone http://llvm.org/git/libcxx )
        ( cd $src/projects && git clone http://llvm.org/git/compiler-rt )

        ( cd $src && git checkout -q ${version_llvm} )
        ( cd $src/tools/clang && git checkout -q ${version_clang}  )
        # ( cd $src/tools/lldb && git checkout -q ${version_lldb}  )
        ( cd ${src_libcxx} && git checkout -q ${version_libcxx} )
        ( cd ${src_compilerrt} && git checkout -q ${version_compilerrt} )

        ( cd $src/projects && git clone http://llvm.org/git/libcxxabi )
        ( cd ${src_libcxxabi} && git checkout -q ${version_libcxxabi} )

        ( cd $src/projects && git clone https://github.com/pathscale/libcxxrt )
        ( cd ${src_libcxxrt} && git checkout -q ${version_libcxxrt} )

    else
        echo Changing directory to `dirname $src` ...
        cd `dirname $src`

        ( cd ${src} && git pull --rebase )
        ( cd ${src}/tools/clang && git pull --rebase )
        # ( cd ${src}/tools/lldb && git pull --rebase )
        ( cd ${src_libcxx} && git pull --rebase )
        ( cd ${src_compilerrt} && git pull --rebase )

        ( cd $src && git checkout -q ${version_llvm} )
        ( cd $src/tools/clang && git checkout -q ${version_clang}  )
        # ( cd $src/tools/lldb && git checkout -q ${version_lldb}  )
        ( cd ${src_libcxx} && git checkout -q ${version_libcxx} )
        ( cd ${src_compilerrt} && git checkout -q ${version_compilerrt} )

        ( cd ${src_libcxxabi} && git pull --rebase )
        ( cd ${src_libcxxabi} && git checkout -q ${version_libcxxabi} )

        ( cd ${src_libcxxrt} && git pull --rebase )
        ( cd ${src_libcxxrt} && git checkout -q ${version_libcxxrt} )
    fi

    # # Apply any patches we might need.
    for i in $patches/*; do
        echo Applying $i ...
        b=`basename $i`
        ( cd $src; echo === $i; basename "$i" | grep -- '-' && cd `echo $b | awk -v src=$src -F - '{printf("%s/%s/%s", src, $1, $2);}'`; pwd; cat $i | git am -3 )
    done

    echo === Done applying patches

fi

echo Changing directory to $src ...
cd $src

if [ "${do_abi}" == "1" ]; then

    if [ "${use_libcxxabi}" == "1" ]; then
        ### Build libc++abi. Note that even though it's in the
        ### llvm/projects directory, it's not automatically included
        ### in the built as it doesn't provide a CMakeLists.txt yet.

        echo ===
        echo === Building libcxxabi ...
        echo ===

        ( cd ${src_libcxxabi}/lib && CXX="$prefix/bin/clang++ -I${src_libcxx}/include" PREFIX=$prefix TRIPLE=$triple ./buildit )
        dylib=`install_shared_lib ${src_libcxxabi}/lib/libc++abi`

        if [ "$OS" == "Darwin" ]; then
           addl_ldflags="${addl_ldflags} -reexport_library $dylib"
           addl_ldflags="${addl_ldflags} -sub_library libc++abi"
        else
           echo "lib++abi not supported on $OS"
        fi

        addl_cmake="${addl_cmake} -DLIBCXX_CXX_ABI=libcxxabi -DLIBCXX_LIBCXXABI_INCLUDE_PATHS=${src_libcxxabi}/include"
    fi

    if [ "${use_libcxxrt}" == "1" ]; then
        echo ===
        echo === Building libcxxrt ...
        echo ===

        ( cd ${src_libcxxrt} && rm -rf build && mkdir build && cd build && CFLAGS="-fPIC" CXXFLAGS="-fPIC" cmake .. && make )

        # Remove shared library so that libcxx will link against the static version.
        rm -f ${src_libcxxrt}/build/lib/*.${soext}

        addl_ldflags="${addl_ldflags} -L${src_libcxxrt}/build/lib"
        addl_cmake="${addl_cmake} -DLIBCXX_CXX_ABI=libcxxrt -DLIBCXX_LIBCXXRT_INCLUDE_PATHS=${src_libcxxrt}/src"
    fi
fi

function st
{
    eval printf "%s" \$\{$1_stage${stage}\}
}

BUILD_TYPE_stage1=Release
CC_stage1=""
CXX_stage1=""
CXXFLAGS_stage1=""
CMAKE_stage1="-DLLVM_ENABLE_ASSERTIONS=off"

BUILD_TYPE_stage2=Release
CC_stage2=$prefix/bin/clang
CXX_stage2=$prefix/bin/clang++
CXXFLAGS="-stdlib=libc++"
CMAKE_stage2="-DLLVM_ENABLE_ASSERTIONS=off"

BUILD_TYPE_stage3=RelWithDebInfo
CC_stage3=$prefix/bin/clang
CXX_stage3=$prefix/bin/clang++
CXXFLAGS_stage3="-stdlib=libc++"
CMAKE_stage3="-DLLVM_ENABLE_ASSERTIONS=on -DLLVM_EXTERNAL_CLANG_BUILD=off -DLLVM_EXTERNAL_LIBCXX_BUILD=off -DLLVM_EXTERNAL_COMPILER_RT_BUILD=off"

for stage in 1 2 3; do

     if [ "`st perform`" == "0" ]; then
         continue
     fi

     echo ===
     echo === Building LLVM/clang, stage ${stage} ...
     echo ===

     ( mkdir -p build-stage${stage} && \
       cd build-stage${stage} && \
       CC=`st CC`
       CXX=`st CXX`
       CXXFLAGS=`st CXXFLAGS`
       LDFLAGS="-L $libcxx_lib -Wl,-rpath,$libcxx_lib ${addl_ldflags}" \
       cmake -DCMAKE_BUILD_TYPE=`st BUILD_TYPE` \
             -DLLVM_REQUIRES_RTTI=1 \
             -DCMAKE_INSTALL_PREFIX=${prefix} \
             -DC_INCLUDE_DIRS=${default_includes} \
             ${addl_cmake} \
             `st CMAKE` \
             .. && \
       make -j 16 && \
       make install \
     )

done

exit

### Build libc++ with new clang and libcxx, and then install.
### Note that even though it's in the llvm/projects directory, it's not automatically included in the built.
### (In fact, libcxx is explicitly *excluded* llvm/projects/CMakeIndex.txt).

# echo ===
# echo === Building libc++ ...
# echo ===
#
# ( cd ${src_libcxx} && rm -rf build && mkdir build && cd build &&
#   CC="${libcxx_cc}" CXX="${libcxx_cxx}" LDFLAGS="${libcxx_ldflags}" cmake ${libcxx_cmake} -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$prefix .. &&
#   make && make install
# )

# Now compile clang with the new libaries.

echo ===
echo === Building LLVM/clang, stage 2 ...
echo ===

if [ "$mode" == "install" ]; then
    ( mkdir -p build-stage2 && \
      cd build-stage2 && \
      CC=$prefix/bin/clang     \
      CXX=$prefix/bin/clang++  \
      CXXFLAGS="-stdlib=libc++" \
      LDFLAGS="-L $libcxx_lib -Wl,-rpath,$libcxx_lib ${libcxx_ldflags} ${addl_ldflags}" \
      cmake -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_ASSERTIONS=off \
            -DLLVM_REQUIRES_RTTI=1 \
            -DCMAKE_INSTALL_PREFIX=${prefix} \
            -DC_INCLUDE_DIRS=${default_includes} \
            ${libcxx_cmake} \
            ..
    )
fi

( cd build-stage2 && make -j 16 && make install )

exit

if [ "${do_llvm_with_assertions}" == "1" -o "${do_llvm_with_debug}" == "1" ]; then

    build_type=RelWithDebInfo

    if [ "${do_llvm_with_debug}" == "1" ]; then
        build_type=Debug
    fi

    echo ===
    echo === Building LLVM with assertions, stage 3 ...
    echo ===

    ( mkdir -p build-stage3 && \
      cd build-stage3 && \
      CC=$prefix/bin/clang     \
      CXX=$prefix/bin/clang++  \
      CXXFLAGS="-stdlib=libc++" \
      LDFLAGS="-L $libcxx_lib -Wl,-rpath,$libcxx_lib ${addl_ldflags}" \
      cmake -DCMAKE_BUILD_TYPE=${build_type} \
            -DLLVM_ENABLE_ASSERTIONS=on \
            -DLLVM_REQUIRES_RTTI=1 \
            -DCMAKE_INSTALL_PREFIX=${prefix} \
            -DC_INCLUDE_DIRS=${default_includes} \
            -DLLVM_EXTERNAL_CLANG_BUILD=off \
            -DLLVM_EXTERNAL_COMPILER_RT_BUILD=off \
            ..
    )

( cd build-stage3 && make -j 16 && make install )

fi


echo "===="
echo "==== Complete log in $log"
echo "===="
